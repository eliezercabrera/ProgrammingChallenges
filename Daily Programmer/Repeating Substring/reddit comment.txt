# Haskell

I preemptively apologize to all the chemists who will, no doubt, dread my inaccurate and downright wrong chemical nomenclature. It has been more than five years since I had anything to do with chemistry; furthermore, the classes were in a different language.

I took a linear algebra class last spring (Northern Hemisphere) semester in which the professor explained how to balance chemical equations using matrices and Gauﬂ-elimination. For those interested, there are videos on YouTube explaining this method, just search for "Balance Chemical Equation Matrix." I don't link to a particular video because they all assume different levels of linear algebra knowledge.

Without further ado, my long but IMO very readable solution:

    {-# LANGUAGE OverloadedStrings #-}
    {-# LANGUAGE RecordWildCards   #-}

    import Data.Ratio
    import Data.Ord  (comparing)
    import Data.Char (isUpper, isDigit, isLower)
    import Data.List (nub, (!!), delete, elem, sortBy, dropWhileEnd, splitAt)

    import qualified Data.Text as T
    import qualified Data.Attoparsec.Text as P

    data Equation = Equation { leftSide  :: Expression
                             , rightSide :: Expression}

    newtype Expression = Expression { molecules    :: [Molecule]}
    newtype Molecule   = Molecule   { submolecules :: [SubMolecule]}

    -- I don't know if molecules can have nested parentheses,
    -- so I allow it just in case
    data SubMolecule = Simple   { element   :: Element
                                , subscript :: Subscript}
                     | Compound { submoleculesC :: [SubMolecule]
                                , subscript     :: Subscript}

    type Element   = T.Text
    type Subscript = Int

    parseEquation :: P.Parser Equation
    parseEquation = do
      left <- parseExpression
      P.string " -> "
      right <- parseExpression
      return $ Equation left right

    parseExpression :: P.Parser Expression
    parseExpression = Expression <$> P.sepBy1 parseMolecule (P.string " + ")

    parseMolecule :: P.Parser Molecule
    parseMolecule = Molecule <$> P.many' parseSubmolecule

    parseSubmolecule :: P.Parser SubMolecule
    parseSubmolecule = do
      c <- P.peekChar
      case c of
        Just '(' -> parseCompound
        _ -> parseSimple

    parseSimple :: P.Parser SubMolecule
    parseSimple = do
      element <- parseElement
      subscript <- P.takeWhile isDigit
      if T.null subscript
        then return $ Simple element 1
        else return $ Simple element (read $ T.unpack subscript)

    parseCompound :: P.Parser SubMolecule
    parseCompound = do
      P.char '('
      simples <- P.many' parseSubmolecule
      P.char ')'
      subscript <- P.takeWhile isDigit
      if T.null subscript
        then return $ Compound simples 1
        else return $ Compound simples (read $ T.unpack subscript)

    parseElement :: P.Parser Element
    parseElement = do
      capital <- P.satisfy isUpper
      rest <- P.takeWhile isLower
      return $ capital `T.cons` rest

    countMolecules :: Equation -> Int
    countMolecules (Equation {..}) = sum $ length . molecules <$> [leftSide, rightSide]
        
    elements :: Equation -> [Element]
    elements = nub . concatMap getMoleculeElements . molecules . leftSide
        where getMoleculeElements = concatMap getElements . submolecules
              getElements (Simple   {..}) = [element]
              getElements (Compound {..}) = concatMap getElements submoleculesC
              
    countElement :: Equation -> Element -> [Int]
    countElement (Equation l r) e = countSide l ++ map negate (countSide r)
        where countSide = map countMolecule . molecules
              countMolecule = sum . map countSubmolecules . submolecules
              countSubmolecules (Simple {..})
                  | e == element = subscript
                  | otherwise = 0
              countSubmolecules (Compound {..})
                  = sum $ map ((subscript*) . countSubmolecules) submoleculesC

    type Vector = [Rational]
    type Row    = [Rational]
    type Matrix = [[Rational]]

    type RowIndex = Int

    -- Without sorting, the matrix returned wouldn't be in triangular form
    -- Why? Zeroing the first element of a row might zero more cells
    gauss :: Matrix -> Matrix
    gauss = toUpperTriangular . map unitizeRowPivot . gauss' 0
        where toUpperTriangular = sortBy (comparing $ length . takeWhile (== 0))
              gauss' rowIndex matrix
                | rowIndex == length matrix = matrix
                | all (== 0) (matrix !! rowIndex) = gauss' (rowIndex + 1) matrix
                | otherwise = gauss' (rowIndex + 1) newPivotMatrix
                where newPivotMatrix = foldr (zeroRowPivot rowIndex) matrix otherIndices
                      otherIndices   = delete rowIndex [0 .. length matrix - 1]

    -- This function is ugly because I am using lists, which don't easily support mutation
    -- of particular elements
    -- This functions uses the row specified by the first argument to make the first element
    -- of the row given by the second argument equal to 0
    zeroRowPivot :: RowIndex -> RowIndex -> Matrix -> Matrix
    zeroRowPivot pivotRow targetRow matrix
      = up ++ (zipWith (+) oldRow scaledRow) : down
        where scaledRow = map (*scaleFactor) $ matrix !! pivotRow
              (up, (oldRow:down)) = splitAt targetRow matrix
              scaleFactor = negate $ nonZeroLead targetRow / nonZeroLead pivotRow
                  where leadingZeroes = takeWhile (== 0) (matrix !! pivotRow)
                        nonZeroLead = head . drop (length leadingZeroes) . (matrix !!)
              

    -- Makes the first element of the row 1
    unitizeRowPivot :: Row -> Row
    unitizeRowPivot row
        | all (== 0) row = row
        | otherwise = zipWith (*) row (repeat multiplicativeInverse)
          where multiplicativeInverse = 1 / pivot row
                pivot = head . dropWhile (== 0)

    showBalancedEquation :: String -> [Integer] -> String
    showBalancedEquation _ (0:_) = "Nope!"
    showBalancedEquation s' ns' = sBE (words s') ns'
        where sBE [molecule] [1] = molecule
              sBE [molecule] [n] = show n ++ molecule
              sBE (molecule:symbol:rest) (n:ns)
                = number ++ molecule ++ ' ' : symbol ++ ' ' : sBE rest ns
                  where number = if n /= 1 then show n else ""

    balanceEquation :: T.Text -> Equation -> String
    balanceEquation eqText equation
        = let -- each row represents how many times an element apears
              -- on every molecule (on every "addend")
              matrix = map fromIntegral . countElement equation <$> elements equation
              -- discard last rows that are all zeroes, take the additive
              -- inverse of last element in rows
              pivots = map (negate . last) . dropWhileEnd (all (== 0)) $ gauss matrix
              -- if we have less pivots than molecules, we pad the
              -- pivots at the end with 1s
              paddedPivots = pivots
                ++ replicate (countMolecules equation - length pivots) (fromIntegral 1)
              -- the common denominator of the pivots is the least
              -- common multiple of their denominators
              commonDenominator = foldl lcm 1 $ map denominator paddedPivots
              -- we must have whole molecules, so let's get rid of the fractions
              wholePivots = map ((commonDenominator % 1)*) paddedPivots
              -- use the pivots we computed to annotated the input
              -- (the input is the string representing the chemical equation)
          in  showBalancedEquation (T.unpack eqText) (map numerator wholePivots)

    main :: IO ()
    main = do
        input <- T.pack <$> getContents
        let equation = P.parseOnly parseEquation input
        putStr $ either id (balanceEquation input) equation

This was my first time using the (atto)Parsec library. It was surprisingly easy to use. I think that trying new libraries to solve this subreddit's challenges has helped me learn how to use new libraries more quickly.

I was also going to try using the lens library for the types I described, but I realized it was probably overkill since I didn't need to update them, just access some of their records.

I actually think that for the subset of operations that my program performs on the matrix, that an implementation based on lists is actually not that bad performance-wise. In any case, the program runs instantaneously even without optimizations. I wish I had been that quick during my linear algebra tests, or endless homework assignments for that matter.

As I mentioned in a comment, I don't know if a molecule can have nested parenthesis; e.g. Ja(JeJi4(JoJu2))3. I don't remember any molecule with such a formula, but my implementation allows it because just to be safe. Also, it that weren't allowed, I'd probably use more Data types to express the grammar properly.

Feedback is welcome, and questions are appreciated.